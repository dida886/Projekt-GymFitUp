package com.example.dmain.gymfit.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERIES".
*/
public class SeriesDao extends AbstractDao<Series, Long> {

    public static final String TABLENAME = "SERIES";

    /**
     * Properties of entity Series.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SERIES = new Property(0, long.class, "SERIES", true, "_id");
        public final static Property WEIGHT = new Property(1, String.class, "WEIGHT", false, "WEIGHT");
        public final static Property REPS = new Property(2, String.class, "REPS", false, "REPS");
    }


    public SeriesDao(DaoConfig config) {
        super(config);
    }
    
    public SeriesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERIES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: SERIES
                "\"WEIGHT\" TEXT," + // 1: WEIGHT
                "\"REPS\" TEXT);"); // 2: REPS
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERIES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Series entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSERIES());
 
        String WEIGHT = entity.getWEIGHT();
        if (WEIGHT != null) {
            stmt.bindString(2, WEIGHT);
        }
 
        String REPS = entity.getREPS();
        if (REPS != null) {
            stmt.bindString(3, REPS);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Series entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSERIES());
 
        String WEIGHT = entity.getWEIGHT();
        if (WEIGHT != null) {
            stmt.bindString(2, WEIGHT);
        }
 
        String REPS = entity.getREPS();
        if (REPS != null) {
            stmt.bindString(3, REPS);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Series readEntity(Cursor cursor, int offset) {
        Series entity = new Series( //
            cursor.getLong(offset + 0), // SERIES
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // WEIGHT
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // REPS
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Series entity, int offset) {
        entity.setSERIES(cursor.getLong(offset + 0));
        entity.setWEIGHT(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setREPS(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Series entity, long rowId) {
        entity.setSERIES(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Series entity) {
        if(entity != null) {
            return entity.getSERIES();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Series entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
