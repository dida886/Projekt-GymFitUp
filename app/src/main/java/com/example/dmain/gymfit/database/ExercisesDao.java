package com.example.dmain.gymfit.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXERCISES".
*/
public class ExercisesDao extends AbstractDao<Exercises, Long> {

    public static final String TABLENAME = "EXERCISES";

    /**
     * Properties of entity Exercises.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID_EXERCISES = new Property(0, long.class, "ID_EXERCISES", true, "_id");
        public final static Property NAME = new Property(1, String.class, "NAME", false, "NAME");
    }


    public ExercisesDao(DaoConfig config) {
        super(config);
    }
    
    public ExercisesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXERCISES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: ID_EXERCISES
                "\"NAME\" TEXT);"); // 1: NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXERCISES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Exercises entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID_EXERCISES());
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Exercises entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID_EXERCISES());
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Exercises readEntity(Cursor cursor, int offset) {
        Exercises entity = new Exercises( //
            cursor.getLong(offset + 0), // ID_EXERCISES
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // NAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Exercises entity, int offset) {
        entity.setID_EXERCISES(cursor.getLong(offset + 0));
        entity.setNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Exercises entity, long rowId) {
        entity.setID_EXERCISES(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Exercises entity) {
        if(entity != null) {
            return entity.getID_EXERCISES();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Exercises entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
